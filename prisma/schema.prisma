// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId],references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  //fix the warning
  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId],references: [id])
  name String
  value String

  products Product[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId],references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId],references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id])
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  images Image[]
  
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}
//A product has multiple image
model Image {
  id String @id @default(uuid())
  productId String
  //onDelete: Cascade will allow us to delete product even if we have an existing image model which uses the product, otherwise we can not delete product that has image
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])

}
model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId],references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  //the phone and address will be emty until a order is placed
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

//order item will be intermidiatory between many-to-many relationship between order item and product
model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])
  @@index([orderId])
  @@index([productId])
}